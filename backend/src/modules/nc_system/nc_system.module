<?php

use Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\nc_system\Entity\Paragraph\BlockQuote;
use Drupal\nc_system\Entity\Paragraph\Highlight;
use Drupal\nc_system\Entity\Paragraph\CallToAction;
use Drupal\nc_system\Entity\Node\Homepage;
use Drupal\nc_system\Entity\Node\Article;
use Drupal\nc_system\Entity\Node\ServicePage;
use Drupal\nc_system\Entity\Node\ServiceLandingPage;
use Drupal\nc_system\Entity\Paragraph\CouncilSignpost;
use Drupal\nc_system\Entity\Paragraph\CouncilSignposting;
use Drupal\nc_system\Entity\Paragraph\Section;
use Drupal\nc_system\Entity\Paragraph\ServiceLinks;
use Drupal\nc_system\Entity\Paragraph\Accordion;
use Drupal\nc_system\Entity\Paragraph\AccordionItem;
use Drupal\nc_system\Entity\Paragraph\FileDownload;
use Drupal\nc_system\Entity\Paragraph\PromoBanner;
use Drupal\nc_system\Entity\TaxonomyTerm\SovereignCouncil;
use Drupal\node\Entity\Node;
use Drupal\system\Entity\Menu;
use Drupal\redirect\Entity\Redirect;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * Changes the bundle classes used by drupal, so when when an entity of
 * a specific bundle is loaded, one of the below classes is used.
 * @param array $bundles
 */
function nc_system_entity_bundle_info_alter(array &$bundles) {
  // Node bundles
  $bundles['node']['homepage']['class'] = Homepage::class;
  $bundles['node']['news_article']['class'] = Article::class;
  $bundles['node']['service_page']['class'] = ServicePage::class;
  $bundles['node']['service_landing_page']['class'] = ServiceLandingPage::class;

  // Paragraph bundles
  $bundles['paragraph']['call_to_action']['class'] = CallToAction::class;
  $bundles['paragraph']['council_signpost']['class'] = CouncilSignpost::class;
  $bundles['paragraph']['council_signposting']['class'] = CouncilSignposting::class;
  $bundles['paragraph']['pull_quote']['class'] = BlockQuote::class;
  $bundles['paragraph']['highlight']['class'] = Highlight::class;
  $bundles['paragraph']['section']['class'] = Section::class;
  $bundles['paragraph']['service_links']['class'] = ServiceLinks::class;
  $bundles['paragraph']['accordion']['class'] = Accordion::class;
  $bundles['paragraph']['accordion_item']['class'] = AccordionItem::class;
  $bundles['paragraph']['file_download']['class'] = FileDownload::class;
  $bundles['paragraph']['promotional_banner']['class'] = PromoBanner::class;

  // Taxonomy terms
  $bundles['taxonomy_term']['sovereign_councils']['class'] = SovereignCouncil::class;

}

/**
 * @param EntityTypeInterface[] $entity_types
 */
function nc_system_entity_type_alter(&$entity_types) {
  if (isset($entity_types['embedded_paragraphs'])) {
    // Use our own EmbeddedParagraphs class which supports GraphQL entity field resolution.
    $entity_types['embedded_paragraphs']->setClass('Drupal\nc_system\Entity\EmbeddedParagraphs');
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Changes the admin toolbar colour
 * @param array $variables
 */
function nc_system_page_attachments_alter(array &$page) {
  $admin_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();

  if ($admin_theme === 'nc_seven') {
    $themeManager = \Drupal::service('nc_system.website_manager');
    $background_color = $themeManager->getBackgroundColor();

    if (!empty($background_color)) {
      $css = "#toolbar-administration .toolbar-bar { background-color: $background_color; }";
      $page['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => $css,
        ],
        'admin-toolbar-custom-css'
      ];
    }

    $page['#attached']['library'][] = $themeManager->getCssLibrary();
  }
}

/**
 * This function purges the Cloudflare cache on menu updates.
 * @param Menu $menu
 */
function nc_system_menu_update(Menu $menu) {
  if ($menu->id() === 'footer') {
    $purge_service = \Drupal::service('nc_cloudflare_purge.service');
    $purge_service->purgeAll();
  }
}

/**
 * This function purges the Cloudflare cache on redirect updates.
 *  * @param Redirect $entity
 */
function nc_system_redirect_insert(Redirect $entity) {
  _purge_redirect($entity);
}

/**
 * This function purges the Cloudflare cache on creating new menu links.
 * @param MenuLinkContent $entity
 */
function nc_system_menu_link_content_insert(MenuLinkContent $entity) {
  _purge_menu($entity);
}

/**
 * This function purges the Cloudflare cache on updating menu links.
 * @param MenuLinkContent $entity
 */
function nc_system_menu_link_content_update(MenuLinkContent $entity) {
  _purge_menu($entity);
}

/**
 * This function purges the Cloudflare cache on deleting menu links.
 * @param MenuLinkContent $entity
 */
function nc_system_menu_link_content_delete(MenuLinkContent $entity) {
  _purge_menu($entity);
}

/**
 * This function purges the Cloudflare cache on menu links.
 * @param MenuLinkContent $entity
 */
function _purge_menu(MenuLinkContent $entity) {
  if ($entity->getMenuName() === 'footer') {
    $purge_service = \Drupal::service('nc_cloudflare_purge.service');
    $purge_service->purgeAll();
  }
}
/**
 * This function purges the redirect added Cloudflare cache on redirect insert.
 * @param Redirect $entity
 */
function _purge_redirect(Redirect $entity) {
  $urls = [];
  $urls[] = \Drupal::service('nc_system.website_manager')->getHost() . $entity->getSourcePathWithQuery();
  $purge_service = \Drupal::service('nc_cloudflare_purge.service');
  $purge_service->purgeByUrl($urls);
}

/**
 * This function purges the Cloudflare cache when updating the sitewide alerts.
 * @param ConfigPages $entity
 */
function nc_system_config_pages_update(ConfigPages $entity) {
  $type = $entity->get('type')->target_id;

  if ($type === 'sitewide_alerts') {
    $purge_service = \Drupal::service('nc_cloudflare_purge.service');
    $purge_service->purgeAll();
  }
}

/**
 * This function purges the Cloudflare cache when creating the nodes.
 * @param Node $node
 */
function nc_system_node_insert(Node $node) {
  _purge_node($node);
}

/**
 * This function purges the Cloudflare cache when updating the nodes
 * @param Node $node
 */
function nc_system_node_update(Node $node) {
  _purge_node($node);
}

/**
 * Before save this checks to see if it was a page being published outside of working hours
 * Saturday, Sunday or before 9am or after 5pm Monday-Friday
 * @param Node $node
 */
function nc_system_node_presave(Node $node) {
  $node_type = $node->getType();
  $today = new DrupalDateTime('now');
  if($node_type === 'service_page' || $node_type === 'service_landing_page') {
    $publishing_service = \Drupal::service('nc_workflow.publishing_service');
    $out_of_hours = $publishing_service->isOutOfHours($today);

    if ($out_of_hours && $node->isPublished())  {
      $node->set('field_published_out_of_hours', '1');
    }
    else {
      $node->set('field_published_out_of_hours', '0');
    }
  }
}

/**
 * This function purges the Cloudflare cache on nodes.
 * @param Node $node
 */
function _purge_node(Node $node) {
  $urls = [];
  $host = \Drupal::service('nc_system.website_manager')->getHost();
  $page_url = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());

  switch ($node->getType()) {
    case 'homepage':
      $urls[] = $host;
      break;

    case 'service_landing_page':
    case 'service_page':
      $urls[] = $host . $page_url;
      break;

    case 'news_article':
      $urls[] = $host . '/news';
      $urls[] = $host . $page_url;

      // if the news article is promoted we clear the homepage as well
      if ($node->isPromoted()) {
        $urls[] = $host;
      }

      break;
  }

  if (!empty($urls)) {
    $purge_service = \Drupal::service('nc_cloudflare_purge.service');
    $purge_service->purgeByUrl($urls);
  }
}

/**
 * Implements hook_xmlsitemap_element_alter().
 */
function nc_system_xmlsitemap_element_alter(&$element, array $link, $sitemap) {
  $replacement_url = parse_url(\Drupal::service('nc_system.website_manager')->getHost())['host'];
  $base_url = \Drupal::request()->getHost();
  $element['loc'] = str_replace($base_url, $replacement_url, $element['loc']);
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function nc_system_ckeditor_css_alter(&$css, $editor) {
  $ckeditor_stylesheet = \Drupal::service('nc_system.website_manager')->getCkEditorStyleSheet();
  $css[] = drupal_get_path('theme', 'nc_seven') . $ckeditor_stylesheet;
}
