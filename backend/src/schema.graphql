
# Query
type Query {
  route(path: String!): DrupalRoute!
  globals: DrupalGlobals!
  search(text: String!, page: Int!): SearchResults!
}

type SearchResults {
  council_name: String!
  total: Int!
  pageSize: Int!
  page: Int!
  text: String!
  result_list: [SearchResult!]
}

type SearchResult {
  id: String!
  url: String!
  title: String!
  teaser: String!
  parent: String
  signposts: [CouncilData!]
}

type CouncilData {
  code: String!
  name: String!
  homepage: String!
}

# Scalars
scalar HTML

# Directives
directive @entityType on INTERFACE | UNION | OBJECT
#directive @slice on UNION
# TODO Use this to auto-resolve entities to graphql types
directive @entity(type: EntityType!, bundle: String!) on OBJECT

# Drupal routes

union DrupalRoute = DrupalNodeRoute | DrupalNotFoundRoute | DrupalOfflineRoute | DrupalRedirectRoute | DrupalAccessDeniedRoute


type DrupalNodeRoute  {
  node: Node!
}

type DrupalNotFoundRoute {
  info: String
}

type DrupalOfflineRoute {
  info: String
}

type DrupalRedirectRoute {
  destination: String!
  status: Int!
}

type DrupalAccessDeniedRoute {
  reason: String!
}

#
# Globals
#

type DrupalGlobals {
  footerLinks: [LinkFieldWithTitle!]!
}

#
# Drupal field structures
#

interface FormattedFieldBase {
  value: String!
  format: String!
  processed: String!
}

type FormattedField implements FormattedFieldBase {
  value: String!
  format: String!
  processed: String!
}

type FormattedFieldWithParagraphsEmbed implements FormattedFieldBase {
  value: String!
  format: String!
  processed: String!
  embeds: [EmbeddedParagraph!]!
}

type EmbeddedParagraph @entityType @entity(type: embedded_paragraph, bundle: "EmbeddedParagraph") {
  # Used by FormattedFieldWithParagraphsEmbed
  id: ID!
  paragraph: Paragraph!
}

# Links
type LinkField {
  url: String!
  external: Boolean!
}

type LinkFieldWithTitle {
  url: String!
  title: String!
  external: Boolean!
}

type Breadcrumb {
  url: String!
  title: String!
}

type MetaData {
  metaTitle: String!
  metaDescription: String
  metaKeywords: String
}

# TODO: Use this later?
#enum VersionStatus {
#  PUBLISHED
#  DRAFT
#  DRAFT
#  PREVIOUS_REVISION
#  PREVIEW
#}

enum EntityType {
  node
  paragraph
  embedded_paragraph
  taxonomy_term
}

#
# Content types (Nodes)
#

interface Node @entityType {
  id: String!
  url: String!
  title: String!
  status: Boolean!
  metaTitle: String!
  metaDescription: String
  metaKeywords: String
}

type HomepageNode implements Node @entity(type: node, bundle: "homepage") {
  id: String!
  url: String!
  title: String!
  status: Boolean!
  metaTitle: String!
  metaDescription: String
  metaKeywords: String
  body: FormattedFieldWithParagraphsEmbed
  serviceLinks: [ServiceLinksParagraph!]!
}

type ServicePageNode implements Node @entity(type: node, bundle: "service_page") {
  id: String!
  title: String!
  url: String!
  status: Boolean!
  metaTitle: String!
  metaDescription: String
  metaKeywords: String
  body: FormattedFieldWithParagraphsEmbed!
  summary: String!
  signposting: CouncilSignpostingParagraph
  breadcrumbs: [Breadcrumb!]!
  canonicalSection: SectionParagraph
  inSections: [SectionParagraph!]! # All the sections this service page is in.
}

type ServiceLandingPageNode implements Node @entity(type: node, bundle: "service_landing_page") {
  id: String!
  title: String!
  url: String!
  status: Boolean!
  metaTitle: String!
  metaDescription: String
  metaKeywords: String
  body: FormattedFieldWithParagraphsEmbed
  summary: String!
  breadcrumbs: [Breadcrumb!]!
  inSections: [SectionParagraph!]! # All the sections this service landing page is in.
  hasSections: [SectionParagraph!]! # All the sections ON this service landing page.
}

#
# Paragraph types
#

interface Paragraph @entityType {
  id: String!
}

type CallToActionParagraph implements Paragraph @entity(type: paragraph, bundle: "call_to_action") {
  id: String!
  link: LinkFieldWithTitle!
}

type CouncilSignpostParagraph implements Paragraph @entity(type: paragraph, bundle: "council_signpost") {
  id: String!
  council: SovereignCouncil!
  link: LinkField
}

type CouncilSignpostingParagraph implements Paragraph @entity(type: paragraph, bundle: "council_signposting") {
  id: String!
  otherCouncil: LinkField
  signposts: [CouncilSignpostParagraph!]!
}

union SectionPage @entityType = ServicePageNode | ServiceLandingPageNode
type SectionParagraph implements Paragraph @entity(type: paragraph, bundle: "section") {
  id: String!
  name: String!
  pages: [SectionPage!]!
  parent: ServiceLandingPageNode!
}

type BlockQuoteParagraph implements Paragraph @entity(type: paragraph, bundle: "pull_quote") {
  id: String!
  quote: String!
  citation: String
}

type ServiceLinksParagraph implements Paragraph @entity(type: paragraph, bundle: "service_links") {
  id: String!
  serviceLandingPage: ServiceLandingPageNode!
  servicePages: [ServicePageNode!]!
}

type AccordionParagraph implements Paragraph @entity(type: paragraph, bundle: "accordion") {
  id: String!
  sections: [AccordionItemParagraph!]!
}

type AccordionItemParagraph implements Paragraph @entity(type: paragraph, bundle: "accordion_item") {
  id: String!
  title: String!
  summary: String
  body: FormattedFieldWithParagraphsEmbed!
}

# Slices

#union Slice @slice = CallToActionParagraph

#
# Taxonomy term
#

interface TaxonomyTerm @entityType {
  id: String!
  name: String!
}

type SovereignCouncil implements TaxonomyTerm @entity(type: taxonomy_term, bundle: "sovereign_councils") {
  id: String!
  code: String!
  name: String!
  homepage: LinkField!
}

